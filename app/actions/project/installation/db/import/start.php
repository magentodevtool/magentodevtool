<?php

$dbCred = $inst->getDbCredentials();
$dumpFile = $inst->_appRoot . 'var/' . $dbImport->dump;
$database = isset($dbImport->database) ? $dbImport->database : $dbCred->dbname;
$tables = $dbImport->tables;

$errorFile = $dumpFile . '.errors';
$rai = $inst->uploadRai();
$initCommand = $inst->getInitCommandBeforeDumpImport($dumpFile);

// use shellescapef instead of cmd to avoid adding 2>&1
$cmd = shellescapef(
    "php %s %s %s %s | MYSQL_PWD=%s mysql -h%s -u%s %s -v $initCommand 2>%s",
    $rai->dir . 'db/backup/read.php', $dumpFile, json_encode($tables), $database,
    $dbCred->password, $dbCred->host, $dbCred->username, $database, $errorFile
);

$insertedDataSize = 0;
$queriesDone = 0;
$currentTable = '';
$line = null;
$previousLine = null;
$skipNextQueryEnd = false;
$progressInfoKey = 'dbImport/progressInfo/' . $dbImport->database;

// reset progress info
$inst->vars->set($progressInfoKey, null);
$lastProgressUpdateMicroTime = microtime(true);

$chunkCb = function ($chunk, $isNewLine) use (
    $inst,
    &$insertedDataSize,
    &$queriesDone,
    &$currentTable,
    &$line,
    &$previousLine,
    &$skipNextQueryEnd,
    &$progressInfoKey,
    $dbImport,
    &$lastProgressUpdateMicroTime
) {

    if ($isNewLine) {
        $previousLine = $line;
        $line = $chunk;
    } else {
        $line .= $chunk;
    }

    if (!$previousLine) {
        return;
    }

    if (preg_match('~^INSERT +(IGNORE )?INTO `([^`]+)` VALUES~', $previousLine, $matches)) {
        if (isset($matches[2])) {
            //add previous table data to inserted data
            $currentTable = $matches[2];
            $insertedDataSize += $inst->dump->getInsertQuerySize(
                $previousLine,
                $dbImport->dumpInfo->tables,
                $currentTable
            );
        }
    }

    if ($previousLine === "--------------\n") {
        if ($skipNextQueryEnd) {
            $skipNextQueryEnd = false;
        } else {
            $queriesDone += 0.5;
        }
    }
    // ignore queries generated by Devtool
    if (preg_match('~^(StArT TRANSACTION)|(CoMmIt)~', $previousLine)) {
        $queriesDone -= 0.5;
        $skipNextQueryEnd = true;
    }

    $doUpdateProgress = (microtime(true) - $lastProgressUpdateMicroTime) > 0.25;

    if ($doUpdateProgress) {
        $inst->vars->set($progressInfoKey, compact('insertedDataSize', 'queriesDone', 'currentTable'));
        $lastProgressUpdateMicroTime = microtime(true);
    }

    $previousLine = null;
};

execCallback($cmd, $chunkCb);
$chunkCb($previousLine, true);

$inst->vars->delete($progressInfoKey);

if (!filesize($errorFile)) {
    @unlink($errorFile);
} else {
    return array(
        'success' => false,
        'wereErrors' => true,
    );
}

if ($dbImport->adjustToDev) {
    // connect and select database
    Mysql::server($dbCred);
    Mysql::db($database);
    $inst->magento->adjustDbToDev();
}

$inst->magento->flushCaches();

if ($dbImport->removeDump) {
    unlink($dumpFile);
}

return array(
    'success' => true,
    'wereErrors' => false,
);
